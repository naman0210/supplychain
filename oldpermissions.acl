/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Sample access control list.
 */

rule Itemonlycreatedbyproducer{
  description: "Only a producer can create and edited an item"
  participant(p): "org.supplychain.Producer"
  operation: ALL
  resource(v): "org.supplychain.Item"
  condition: (p.getIdentifier() == v.producer.getIdentifier())
  action:ALLOW
}

rule shipperfromproducertoprocessorcreatedonlybyproducer{
  description:"Shipper from producer to processor can only be created and edited by a producer"
  participant(p): "org.supplychain.Producer"
  operation: ALL
  resource(v): "org.supplychain.Shipper_from_producer_to_processor"
  condition: (p.getIdentifier() == v.producer.getIdentifier())
  action: ALLOW
}

rule shipmentfromproducertoprocessorcanonlybecreatedbythecorrespondingshipper {
  description: "Shipment from producer to processor can only be created and edited by the corresponding shipper"
  participant(p): "org.supplychain.Shipper_from_producer_to_processor"
  operation: CREATE,READ,UPDATE
  resource(v): "org.supplychain.Shipment_from_producer_to_processor"
  condition: (p.getIdentifier() == v.shipperfromproducertoprocessor.getIdentifier())
  action: ALLOW
}

rule productcanonlybecreatedbyProcessor{
  description: "Products can only be created by the processor"
  participant(p): "org.supplychain.Processor"
  operation: ALL
  resource(v): "org.supplychain.Product"
  condition: (p.getIdentifier() == v.processor.getIdentifier())
  action: ALLOW
}

rule shipperfromprocessortowarehousecreatedonlybyprocessor{
  description: "Shipper from processor to warehouse can only be created and edited by a processor"
  participant(p): "org.supplychain.Processor"
  operation: ALL
  resource(v): "org.supplychain.Shipper_from_processor_to_warehouse"
  condition: (p.getIdentifier() == v.processor.getIdentifier())
  action: ALLOW
}

rule shipmentfromprocessortowarehousecanonlybecreatedbythecorrespondingshipper {
  description: "Shipment from processor to warehouse can only be created and edited by the corresponding shipper"
  participant(p): "org.supplychain.Shipper_from_processor_to_warehouse"
  operation: CREATE,UPDATE,READ
  resource(v): "org.supplychain.Shipment_from_processor_to_warehouse"
  condition: (p.getIdentifier() == v.shipperfromprocessortowarehouse.getIdentifier())
  action: ALLOW
}

rule shipperfromwarehousetoretailercreatedonlybywarehouse{
  description: "Shipper from warehouse to retailer can only be created and edited by a warehouse"
  participant(p): "org.supplychain.Warehouse"
  operation: ALL
  resource(v): "org.supplychain.Shipper_from_warehouse_to_retailer"
  condition: (p.getIdentifier() == v.warehouse.getIdentifier())
  action: ALLOW
}

rule shipmentfromwarehousetoretailercanonlybecreatedbythecorrespondingshipper {
  description: "Shipment from warehouse to retailer can only be created and edited by the corresponding shipper"
  participant(p): "org.supplychain.Shipper_from_warehouse_to_retailer"
  operation: CREATE,UPDATE,READ
  resource(v): "org.supplychain.Shipment_from_warehouse_to_retailer"
  condition: (p.getIdentifier() == v.shipperfromwarehousetoretailer.getIdentifier())
  action: ALLOW
}

rule producershouldbeabletoedititself {
  description: "The shipper field in the producer should only be filled by itself"
  participant(p): "org.supplychain.Producer"
  operation: UPDATE,READ
  resource(v): "org.supplychain.Producer"
  transaction(tx): "org.supplychain.createshipperfromproducertoprocessor"
  condition: (p.getIdentifier() == v.getIdentifier() && tx.producer.getIdentifier() == v,getIdentifier())
  action: ALLOW
}

rule shippercanupdateitemassetfield {
  description: "Shipper should be able to update the shipping ID field in the item asset"
  participant(p): "org.supplychain.Shipper_from_producer_to_processor"
  operation: UPDATE,READ
  resource(v): "org.supplychain.Item"
  transaction(tx): "org.supplychain.createshipmentfromproducertoprocessor"
  condition: ("org.supplychain.Producer".Shipper_from_producer_to_processor && "org.supplychain.Producer".Shipper_from_producer_to_processor.indexOf(p.getIdentifier()) > -1 && tx.items )// and the items involved in the transaction should already be an asset
  action: ALLOW
}

rule shippercanupdatethenumberofsipmentsintheproducer {
  description: "When a shipment is created the number of shipments through this particular shipper should increase by 1 in the producer participant"
  participant(p): "org.supplychain.Shipper_from_producer_to_processor"
  operation: UPDATE,READ
  resource(v): "org.supplychain.Producer"
  transaction(tx): "org.supplychain.createshipmentfromproducertoprocessor"
  condition: ("org.supplychain.Producer".Shipper_from_producer_to_processor && "org.supplychain.Producer".Shipper_from_producer_to_processor.indexOf(p.getIdentifier()) > -1 && tx.items)
  action: ALLOW
}

rule shippercanupdatethelistofitemsforprocessor {
  description: "Shipper should be able to add the items to a processor when the shipment is delivered"
  participant(p): "org.supplychain.Shipper_from_producer_to_processor"
  operation: READ,UPDATE
  resource(r): "org.supplychain.Processor"
  transaction(tx): "org.supplychain.delveryconfirmedbyproducertoprocessorshipper"
  condition: ("org.supplychain.Producer".Shipper_from_producer_to_processor && "org.supplychain.Producer".Shipper_from_producer_to_processor.indexOf(p.getIdentifier()) > -1 && tx.shipmentfromproducertoprocessor.processor.getIdentifier() == r.getIdentifier())
  action: ALLOW
}

rule Qualityinspectorcaneditproductapprovedfield {
  description: "Approved field of a product can only be updated by the quality inspector"
  participant(p): "org.supplychain.QI"
  operation: UPDATE
  resource(r): "org.supplychain.Product"
  transaction(tx): "org.supplychain.qualityinspection"
  condition: (tx.product.quality_inspector.getIdentifier() == p.getIdentifier())
  action: ALLOW
}

rule processorshouldbeabletoedititself {
  description: "The shipper field in the processor should only be filled by itself"
  participant(p): "org.supplychain.Processor"
  operation: UPDATE,READ
  resource(v): "org.supplychain.Processor"
  transaction(tx): "org.supplychain.createshipperfromprocessortowarehouse"
  condition: (p.getIdentifier() == v.getIdentifier() && tx.processor.getIdentifier() == v,getIdentifier())
  action: ALLOW
}

rule shippercanupdateproductassetfieldforshippingIDtowarehouse {
  description: "Shipper should be able to update the shipping ID field in the product asset"
  participant(p): "org.supplychain.Shipper_from_processor_to_warehouse"
  operation: UPDATE,READ
  resource(v): "org.supplychain.Product"
  transaction(tx): "org.supplychain.createshipmentfromprocessortowarehouse"
  condition: ("org.supplychain.Processor".Shipper_from_processor_to_warehouse && "org.supplychain.Producer".Shipper_from_processor_to_warehouse.indexOf(p.getIdentifier()) > -1 && tx.products )// and the products involved in the transaction should already be an asset
  action: ALLOW
}

rule  shippercanupdatethenumberofsipmentsintheprocessor{
  description: "When a shipment is created the number of shipments through this particular shipper should increase by 1 in the processor participant"
  participant(p): "org.supplychain.Shipper_from_processor_to_warehouse"
  operation: UPDATE,READ
  resource(v): "org.supplychain.Processor"
  transaction(tx): "org.supplychain.createshipmentfromprocessortowarehouse"
  condition: ("org.supplychain.Processor".Shipper_from_processor_to_warehouse && "org.supplychain.Producer".Shipper_from_processor_to_warehouse.indexOf(p.getIdentifier()) > -1 && tx.products )// and the products involved in the transaction should already be an asset
  action: ALLOW
}

rule shippercanupdatethelistofitemsforwarehouse {
  description: "Shipper should be able to add the items to a warehouse when the shipment is delivered"
  participant(p): "org.supplychain.Shipper_from_processor_to_warehouse"
  operation: READ,UPDATE
  resource(r): "org.supplychain.Warehouse"
  transaction(tx): "org.supplychain.delveryconfirmedbyprocessortowarehouseshipper"
  condition: ("org.supplychain.Processor".Shipper_from_processor_to_warehouse && "org.supplychain.Producer".Shipper_from_processor_to_warehouse.indexOf(p.getIdentifier()) > -1  && tx.shipmentfromprocessortowarehouse.warehouse.getIdentifier() == r.getIdentifier())
  action: ALLOW
}

rule warehouseshouldbeabletoedititself {
  description: "The shipper field in the warehouse should only be filled by itself"
  participant(p): "org.supplychain.Warehouse"
  operation: UPDATE,READ
  resource(v): "org.supplychain.Warehouse"
  transaction(tx): "org.supplychain.createshipperfromwarehousetoretailer"
  condition: (p.getIdentifier() == v.getIdentifier() && tx.warehouse.getIdentifier() == v,getIdentifier())
  action: ALLOW
}

rule shippercanupdateproductassetfieldforshippingIDtoretailer {
  description: "Shipper should be able to update the shipping ID field in the product asset"
  participant(p): "org.supplychain.Shipper_from_warehouse_to_retailer"
  operation: UPDATE,READ
  resource(v): "org.supplychain.Product"
  transaction(tx): "org.supplychain.createshipmentfromwarehousetoretailer"
  condition: ("org.supplychain.Warehouse".Shipper_from_warehouse_to_retailer && "org.supplychain.Warehouse".Shipper_from_warehouse_to_retailer.indexOf(p.getIdentifier()) > -1 && tx.products )// and the products involved in the transaction should already be an asset
  action: ALLOW
}

rule  shippercanupdatethenumberofsipmentsinthewarehouse{
  description: "When a shipment is created the number of shipments through this particular shipper should increase by 1 in the warehouse participant"
  participant(p): "org.supplychain.Shipper_from_warehouse_to_retailer"
  operation: UPDATE,READ
  resource(v): "org.supplychain.Warehouse"
  transaction(tx): "org.supplychain.createshipmentfromwarehousetoretailer"
  condition: ("org.supplychain.Warehouse".Shipper_from_warehouse_to_retailer && "org.supplychain.Warehouse".Shipper_from_warehouse_to_retailer.indexOf(p.getIdentifier()) > -1 && tx.products )// and the products involved in the transaction should already be an asset
  action: ALLOW
}

rule shippercanupdatethelistofitemsforretailer{
  description: "Shipper should be able to add the items to a retailer when the shipment is delivered"
  participant(p): "org.supplychain.Shipper_from_warehouse_to_retailer"
  operation: READ,UPDATE
  resource(r): "org.supplychain.Retailer"
  transaction(tx): "org.supplychain.delveryconfirmedbywarehousetoretailershipper"
  condition: ("org.supplychain.Processor".Shipper_from_warehouse_to_retailer && "org.supplychain.Producer".Shipper_from_warehouse_to_retailer.indexOf(p.getIdentifier()) > -1  && tx.shipmentfromwarehousetoretailer.retailer.getIdentifier() == r.getIdentifier())
  action: ALLOW
}

rule Everybodycanreaditems {
  description: "Everybody in the network is allowed to read items"
  participant: "org.supplychain.**"
  operation: READ
  resource: "org.supplychain.Item"
  action: ALLOW
}

rule Everybodycanreadproducts {
  description: "Everybody in the network is allowed to read products"
  participant: "org.supplychain.**"
  operation: READ
  resource: "org.supplychain.Product"
  action: ALLOW
}

rule Everyparticipanthasaccesstosystemresources {
  description: "System resources granted to all participants"
  participant: "org.supplychain.**"
  operation: READ
  resource: "org.hyperledger.composer.system.**"
  action: ALLOW
}

rule NetworkAdminUser {
    description: "Grant business network administrators full access to user resources"
    participant: "org.hyperledger.composer.system.NetworkAdmin"
    operation: ALL
    resource: "**"
    action: ALLOW
}

rule NetworkAdminSystem {
    description: "Grant business network administrators full access to system resources"
    participant: "org.hyperledger.composer.system.NetworkAdmin"
    operation: ALL
    resource: "org.hyperledger.composer.system.**"
    action: ALLOW
}
